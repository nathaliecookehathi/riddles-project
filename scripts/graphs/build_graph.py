# Generate graph from CSV

import pandas as pd
from igraph import *
import numpy as np
from statistics import median


nodes = pd.read_csv("/Users/ndrezn/OneDrive - McGill University/Github/riddles-project/workset/graphs/BoF Dataframe_Nov4.csv")

edges = pd.read_csv("/Users/ndrezn/OneDrive - McGill University/Github/riddles-project/workset/graphs/BOF_Unique_Riddles_numbers_Final.csv")
edges = edges.loc[:, 'UN':'BOF_Appearance_Number']
edges = edges.dropna(subset=['BOFs containing riddle'])

edges['BOFs containing riddle'] = edges.apply(lambda row: ([item.strip() for item in row['BOFs containing riddle'].split(';') if item.strip() is not None]), axis=1)

edges_2 = [lst for lst in edges['BOFs containing riddle']]

nodes = nodes.dropna(subset=['Record Number'])

g = Graph()
g.add_vertices(len(nodes))

g.vs['name'] = [node for node in nodes['Record Number']]
g.vs['year'] = [node for node in nodes['Event_Date']]
g.vs['location'] = [node for node in nodes['Event_Location']]

def build_edges(cur, edgelist):
	for node in edgelist:	
		try:
			eid = g.get_eid(node,cur, error=False)
		except:
			continue
		if eid >= 0:
			g.es[eid]['weight'] += 1
		else:
			g.add_edge(cur, node, weight=1)
	if len(edgelist) > 0:
		build_edges(edgelist.pop(), edgelist)
	else:
		return 1

for edgelist in edges['BOFs containing riddle']:	
	build_edges(edgelist.pop(), edgelist)

# check if the year is before or after the median of the riddles
def convert_year(y):
	if y > 1824:
		y = 'Late'
	else:
		y = 'Early'
	return y

# check the purity of the graph
def test_graph(g):
	louvain = g.community_multilevel(weights = [weight for weight in g.es['weight']])
	
	# total number of communities generated by all the louvain movels
	groups = 0
	# array to hold the purity scores of every community generated
	purity = []
	
	total_groups = len(louvain)
	for group in louvain:
		# dict to hold the number of nodes from each set in
		mediums = {}
		total_nodes = len(group)

		for node in group:
			medium = g.vs['year'][node]
			if medium in mediums:
				mediums[medium] += 1
			else:
			 	mediums[medium] = 1
		
		# majority period from the group
		most = max(mediums.values())
		# number of times each type is the majority
		max_type = max(mediums.items(), key=operator.itemgetter(1))[0]

		# percentage of nodes from the group that are from the majority group
		purity = most/total_nodes
		
		nodes = [g.vs['name'][node] for node in group]
		print(nodes)
		print(max_type)
		print('Purity:', purity)
		print('Total nodes:', total_nodes, '\n')



# test_graph(g)

g.write_graphml("/Users/ndrezn/OneDrive - McGill University/Github/riddles-project/workset/graphs/BOFs_as_network.GraphML")
